<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2018-03-22T16:55:02-03:00</updated><id>/</id><title type="html">Wind and Water</title><subtitle>The fascination of what's difficult...</subtitle><author><name>Douglas Lovell</name></author><entry><title type="html">Tracking the source of a fork</title><link href="/2018/03/tracking-fork-sources.html" rel="alternate" type="text/html" title="Tracking the source of a fork" /><published>2018-03-21T00:00:00-03:00</published><updated>2018-03-21T00:00:00-03:00</updated><id>/2018/03/tracking-fork-sources</id><content type="html" xml:base="/2018/03/tracking-fork-sources.html">&lt;p&gt;In Ruby land, we usually take advantage of open source through the
published gems. Sometimes it’s nice to use open source from the source.
Sometimes you want to run off of a fork, but track
changes and improvements made to the source.
Here are a couple of scenarios:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You need to make some changes for your project that don’t have a prayer
of making it back into the source. That is, you expect to run from the
fork more or less permanently, without requesting the source provider to
pull your very specialized changes.&lt;/li&gt;
  &lt;li&gt;You don’t trust the source not to disappear, or not to quietly introduce
malicious code in an update.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How do you have your cake and eat it too? How do you run a customized
fork while tracking improvements made to the original?&lt;/p&gt;

&lt;p&gt;One way to do this is to fork the source, make a production branch
for your localized modifications, and have the master branch track
the source.
With this setup, you can pull source improvements in the master branch,
then merge or cherry-pick those into your production branch.&lt;/p&gt;

&lt;p&gt;Here’s how it works. We’re going to pick-up an Ansible role from GitHub.
Let’s use, &lt;code class=&quot;highlighter-rouge&quot;&gt;cdriehuys/ansible-role-lock-root&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First, fork the role in GitHub. The name of our fork is,
&lt;code class=&quot;highlighter-rouge&quot;&gt;TelegraphyInteractive/ansible-role-lock-root&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we clone:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/ansible/roles$ git clone \
&amp;gt; git@github.com:TelegraphyInteractive/ansible-role-lock-root.git lock-root
Cloning into 'lock-root'...
~/ansible/roles$ cd lock-root
~/ansible/roles/lock-root[master]$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We cloned inside of the &lt;code class=&quot;highlighter-rouge&quot;&gt;roles&lt;/code&gt; directory of our Ansible playbook, but
that is an irrelevant detail. We also changed the name to keep it short.
The cloned repository exists in directory, &lt;code class=&quot;highlighter-rouge&quot;&gt;~/ansible/roles/lock-root&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;git config -l&lt;/code&gt; output contains these &lt;code class=&quot;highlighter-rouge&quot;&gt;remote&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;branch&lt;/code&gt;
settings:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;remote.origin.url=git@github.com:TelegraphyInteractive/ansible-role-lock-root.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
branch.master.remote=origin
branch.master.merge=refs/heads/master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We want at least one branch to track the master branch from the original
source, &lt;code class=&quot;highlighter-rouge&quot;&gt;cdriehuys/ansible-role-lock-root&lt;/code&gt;. In order to do this, we first
have to make that repository available as a remote.
We create a remote called, &lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/ansible/roles/lock-root[master]$ git remote add \
&amp;gt; -m master -t master \
&amp;gt; source 'git@github.com:cdriehuys/ansible-role-lock-root.git'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;git config -l&lt;/code&gt; output now contains the additional remote
called, &lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;remote.origin.url=git@github.com:TelegraphyInteractive/ansible-role-lock-root.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
branch.master.remote=origin
branch.master.merge=refs/heads/master
remote.source.url=git@github.com:cdriehuys/ansible-role-lock-root.git
remote.source.fetch=+refs/heads/master:refs/remotes/source/master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We want to make the master branch track the source from &lt;code class=&quot;highlighter-rouge&quot;&gt;cdriehuys&lt;/code&gt;.
First we fetch the branches from the source, then set the upstream
branch for master.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/ansible/roles/lock-root[master]$ git fetch --all
Fetching origin
Fetching source
From github.com:cdriehuys/ansible-role-lock-root
 * [new branch]      master     -&amp;gt; source/master
~/ansible/roles/lock-root[master]$ git branch --set-upstream-to=source/master
Branch 'master' set up to track remote branch 'master' from 'source'.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;git config -l&lt;/code&gt; output shows that the master branch now tracks
the master branch from &lt;code class=&quot;highlighter-rouge&quot;&gt;cdriehuys&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;remote.origin.url=git@github.com:TelegraphyInteractive/ansible-role-lock-root.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
branch.master.remote=source
branch.master.merge=refs/heads/master
remote.source.url=git@github.com:cdriehuys/ansible-role-lock-root.git
remote.source.fetch=+refs/heads/master:refs/remotes/source/master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that the master branch is now “read-only.” We won’t be able to push
from the master branch, because we do not have write access to the source
repository. We &lt;strong&gt;can&lt;/strong&gt; however do &lt;code class=&quot;highlighter-rouge&quot;&gt;git pull&lt;/code&gt;. The pull will bring any upstream
changes from &lt;code class=&quot;highlighter-rouge&quot;&gt;cdriehuys&lt;/code&gt; into our workspace.&lt;/p&gt;

&lt;p&gt;The only thing left to do is make our own branch based on our own repository,
so that we can make changes. Let’s call the branch, &lt;code class=&quot;highlighter-rouge&quot;&gt;production&lt;/code&gt;.
First we create the branch and switch to it at the same time.
Next we push the branch to our own repository, the &lt;code class=&quot;highlighter-rouge&quot;&gt;origin&lt;/code&gt; and set
that as the “default,” upstream branch for all future pushes.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/ansible/roles/lock-root[master]$ git checkout -b production
Switched to a new branch 'production'
~/ansible/roles/lock-root[production]$ git push --set-upstream origin production
Total 0 (delta 0), reused 0 (delta 0)
To github.com:TelegraphyInteractive/ansible-role-lock-root.git
 * [new branch]      production -&amp;gt; production
Branch 'production' set up to track remote branch 'production' from 'origin'.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The output of &lt;code class=&quot;highlighter-rouge&quot;&gt;git config -l&lt;/code&gt; now shows the new &lt;code class=&quot;highlighter-rouge&quot;&gt;production&lt;/code&gt; branch
tracking our own repository.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;remote.origin.url=git@github.com:TelegraphyInteractive/ansible-role-lock-root.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
branch.master.remote=source
branch.master.merge=refs/heads/master
remote.source.url=git@github.com:cdriehuys/ansible-role-lock-root.git
remote.source.fetch=+refs/heads/master:refs/remotes/source/master
branch.production.remote=origin
branch.production.merge=refs/heads/production
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When we want to pull upstream changes, we go to the master branch
and pull them.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/ansible/roles/lock-root[production]$ git checkout master
Switched to branch 'master'
Your branch is up to date with 'source/master'.
~/ansible/roles/lock-root[master]$ git pull
Already up to date.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can now get a view of the changes made upstream on the master
through &lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;git diff&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Satisfied with the changes, we can merge, cherry-pick or
&lt;a href=&quot;/2018/03/rebase-v-merge.html&quot;&gt;(gulp) rebase&lt;/a&gt;
the changes we have in production:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/ansible/roles/lock-root[master]$ git checkout production
Switched to branch 'production'
Your branch is up to date with 'origin/production'.
~/ansible/roles/lock-root[production]$ git merge master
Already up to date.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This gives us the best of two worlds, don’t you think?
Who says you can’t have your cake and eat it too?&lt;/p&gt;

&lt;p&gt;Well. There’s one source of error.  Now it’s necessary to leave
the directory checked-out to the production branch. If we accidentally
leave it checked-out to the master branch, all of our hard work will
be for naught, and we might face some confusing errors.&lt;/p&gt;

&lt;p&gt;The other complication is that we’ll now have to work with
&lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Tools-Submodules&quot;&gt;git submodules&lt;/a&gt;.
Assuming the project we are working is under source control with git,
we’ve just checked-out another git repository within it.&lt;/p&gt;

&lt;p&gt;There’s some care required with making changes to submodules in a project.
If it isn’t worth the trouble, forget everything you’ve read and copy copy
copy! (It’s the sincerest form of flattery.)&lt;/p&gt;</content><author><name>Douglas Lovell</name></author><summary type="html">In Ruby land, we usually take advantage of open source through the published gems. Sometimes it’s nice to use open source from the source. Sometimes you want to run off of a fork, but track changes and improvements made to the source. Here are a couple of scenarios:</summary></entry><entry><title type="html">The Dispossessed</title><link href="/2018/03/the-dispossessed.html" rel="alternate" type="text/html" title="The Dispossessed" /><published>2018-03-18T00:00:00-03:00</published><updated>2018-03-18T00:00:00-03:00</updated><id>/2018/03/the-dispossessed</id><content type="html" xml:base="/2018/03/the-dispossessed.html">&lt;p&gt;When I read about the &lt;a href=&quot;https://www.nytimes.com/2018/01/23/obituaries/ursula-k-le-guin-acclaimed-for-her-fantasy-fiction-is-dead-at-88.html&quot;&gt;death of Ursula K Le Guin&lt;/a&gt; in the New York Times, at the end of January, I thought
how agreeable she sounded, remembered that I hadn’t found her books
accessible when I was an adolescent, for whatever reason, and
decided to try reading one of them again.&lt;/p&gt;

&lt;p&gt;It isn’t strange, but a little regrettable how an artist’s stock can
go up when they die. It’s only that so many people have that same reaction–
being reminded of something they’ve missed, finding new or renewed
interest in a body of work that, with one inevitable event, has become
a life’s work. The regret is that the artist doesn’t get to feel the
appreciation.&lt;/p&gt;

&lt;p&gt;Her first five books found resonance with me just now, having content
about strangers, aliens living in foreign lands, because I am. After so
many years in the country of my birth now living far away in what is
on one hand much alike– an urban economy connected and woven into
global commerce and trade–
and on the other hand completely foreign in language, cultural expectations,
experience, and values.&lt;/p&gt;

&lt;p&gt;The fifth book, &lt;em&gt;The Dispossessed&lt;/em&gt;, felt to me like a classic work
on a par with the best of the classics.
I feel amazed that it isn’t better known
and more talked about. I feel amazed that it isn’t part of the cultural
curriculum that we consider foundational for the well educated.
Or perhaps it is, and I haven’t been, and I’m just getting around to it.&lt;/p&gt;

&lt;p&gt;When it was published in 1974 it was called a utopian novel. It was a book
about an experimental, anarchistic society,
its successes and shortcomings, and its
relationship to the worlds around it.&lt;/p&gt;

&lt;p&gt;It reads to me, personally, now, as a book whose major theme is not the
societies themselves or their relationships (of which this book describes many)
but rather the relationship of the individual to society.
Some think of Ayn Rand as owning that territory.
&lt;em&gt;The Dispossessed&lt;/em&gt; reminds me of &lt;em&gt;The Fountainhead&lt;/em&gt;.
I now think that she shares it.
This book, being outside of any time or place in human experience,
beyond the limits of a human city in a plausible time, demonstrates
the relationship of the individual to society
at the intersection of multiple worlds, civilizations, and governments.&lt;/p&gt;

&lt;p&gt;For this reason it has lasting relevance and importance above parity with
&lt;em&gt;1984&lt;/em&gt; or &lt;em&gt;Animal Farm&lt;/em&gt;, &lt;em&gt;Catcher in the Rye&lt;/em&gt; or &lt;em&gt;Fahrenheit 451&lt;/em&gt; – all
books that were part of the curriculum when I was young. We weren’t asked
to consume Ayn Rand or Thomas Moore. Ursula K Le Guin was new then.&lt;/p&gt;

&lt;p&gt;The relationship of the individual to society, the tensions around
realization of individual potentials within the surround of their
community, culture, economy, and government are forever, it seems to me,
in flux and in tension.&lt;/p&gt;

&lt;p&gt;How can a poor kid who’s smart contribute and find traction
in an area that is dominated by those more privileged and perhaps,
as often happens, insular? How does an individual with potential open
up a group who has captured an area of discourse
or commerce and established what they consider to be a norm?
How does a person transcend their sex,
race, economic status, language, education, or whatever attributes we
perceive to constitute an “other”?
How does a person find work that produces income while realizing the
best expression of what they are, or potentially might be?
How does a society support and encourage the very difficult work
of sitting down and actually working, vs. getting by, or getting along,
or fitting in?
How do we help people who, facing their work, the incredible monster that it is,
fall short, fail, fear, as we all do, give up, or fall into addiction
or despair or depression?&lt;/p&gt;

&lt;p&gt;These are to me questions of the greatest importance and measure
of the success of a society.  And that’s why I so much liked
Ursula K Le Guin’s &lt;em&gt;The Dispossessed&lt;/em&gt;.&lt;/p&gt;</content><author><name>Douglas Lovell</name></author><summary type="html">When I read about the death of Ursula K Le Guin in the New York Times, at the end of January, I thought how agreeable she sounded, remembered that I hadn’t found her books accessible when I was an adolescent, for whatever reason, and decided to try reading one of them again.</summary></entry><entry><title type="html">Why I’m not on Facebook</title><link href="/2018/03/why-i-dont-use-fb.html" rel="alternate" type="text/html" title="Why I'm not on Facebook" /><published>2018-03-16T00:00:00-03:00</published><updated>2018-03-16T00:00:00-03:00</updated><id>/2018/03/why-i-dont-use-fb</id><content type="html" xml:base="/2018/03/why-i-dont-use-fb.html">&lt;h1 id=&quot;-or-whatsapp-or-instagram-&quot;&gt;… or WhatsApp or Instagram …&lt;/h1&gt;

&lt;p&gt;I don’t use these programs because they leak information about
who your contacts are, whom you talk with, when, and how often,
to invisible, unaccountable third parties.&lt;/p&gt;

&lt;p&gt;Who are these third parties?&lt;/p&gt;

&lt;p&gt;From the &lt;a href=&quot;https://www.facebook.com/about/privacy&quot;&gt;Facebook privacy policy&lt;/a&gt;,
“We share information we have about you within the family of companies that
are part of Facebook.”&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.facebook.com/help/111814505650678&quot;&gt;Facebook lists&lt;/a&gt;
nine companies which comprise the Facebook family:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;WhatsApp: share with Facebook your contacts and how much you interact with them.&lt;/li&gt;
  &lt;li&gt;Instagram LLC: share pictures of people and things of interest to you,
your location.&lt;/li&gt;
  &lt;li&gt;Moves: share with Facebook an activity diary of your daily life.&lt;/li&gt;
  &lt;li&gt;Onavo: share with Facebook the apps you’re using
and how much data you’re using on them (possibly more).&lt;/li&gt;
  &lt;li&gt;Facebook Payments, Inc.: You think this stuff is free? You’re the product.&lt;/li&gt;
  &lt;li&gt;Oculus: virtual reality goggles.&lt;/li&gt;
  &lt;li&gt;Atlas: measure and track purchasing behavior linked to advertising, target
advertising.&lt;/li&gt;
  &lt;li&gt;Masquerade: cross web-site tracking technology.&lt;/li&gt;
  &lt;li&gt;CrowdTangle: monitor social media.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first two are probably familiar.
The next two, maybe you’re foolish enough to use them.
Ever heard of Atlas, Masquerade and CrowdTangle?
&lt;a href=&quot;http://www.crowdtangle.com/features&quot;&gt;CrowdTangle&lt;/a&gt;
is especially interesting.
Know what they do? I’ve added summaries to give you a clue.&lt;/p&gt;

&lt;p&gt;Facebook makes a big deal of your “privacy controls.” You can change all
sorts of settings about who “sees” your posts. This is smoke and mirrors.
The fact is that all of the above collect, collate, merge, and sell access
to &lt;strong&gt;everything&lt;/strong&gt; you do on Facebook and elsewhere on the internet.
Your activity is available privately or by subscription,
without accountability to you, for proprietary purposes.&lt;/p&gt;

&lt;p&gt;Organizations that collect, collate, monitor, and enhance this data
aren’t the true darknet, because they operate under a public
legal framework where they nevertheless hide. What could we call them?
Let’s call them the “datalords”.&lt;/p&gt;

&lt;p&gt;When you assent to Facebook terms, or WhatsApp, or Instagram, or …
you assent to all of the above.&lt;/p&gt;

&lt;h2 id=&quot;how-you-leak-data-to-the-datalords&quot;&gt;How you leak data to the datalords&lt;/h2&gt;
&lt;p&gt;When I share my phone number into your contact list, because you use
WhatsApp, the fact that we are somehow socially connected goes to
the datalords. The fact that I myself don’t use WhatsApp doesn’t matter.
There is still a data block for me and it just got connected to yours.&lt;/p&gt;

&lt;h3 id=&quot;how-metadata-works&quot;&gt;How metadata works&lt;/h3&gt;
&lt;p&gt;Here is an example of how metadata works and how you leak it.
I spend a lot of time abroad, so I have phone numbers in two countries.
One day I made the mistake of sharing my entire contact information with
a WhatsApp user (which is just about anybody). Both of my phone numbers
went into their address book.&lt;/p&gt;

&lt;p&gt;Up until that point, my phone number in one country and the one in another
were completely separate data blocks in the store of the datalords.
However, when next they sucked-up the contacts of my friend,
the two numbers were related and a connection made between the two,
up to now separate data blocks. The connection says, “these are likely the
same person.” After all, they are! And now the datalords can connect every
bit of metadata about one with the other. They’ve enhanced their whole
world picture about who’s who connected with whom.&lt;/p&gt;

&lt;p&gt;And the metadata doesn’t end there. My phone number is associated with my
credit card numbers. Whenever I make a purchase using the credit card,
the purchase data gets tagged on. That includes the location of the purchase,
amount, company, service, sometimes itemized products purchased.&lt;/p&gt;

&lt;p&gt;By matching data items across data blocks – phone number to phone number,
credit card number to credit card number – all of the additional data items
in those blocks can be associated with a single identity and form an ever
growing and more detailed picture of that identity.&lt;/p&gt;

&lt;h2 id=&quot;why-this-makes-me-uneasy&quot;&gt;Why this makes me uneasy&lt;/h2&gt;
&lt;p&gt;As a moral, law abiding citizen who works hard,
pays his taxes and stays out of trouble,
why should I care?&lt;/p&gt;

&lt;p&gt;In early 2017 I wrote a &lt;a href=&quot;http://wbreeze.com/bio/TOSFB.html&quot;&gt;response&lt;/a&gt;
to an Electronic Frontier Foundation (EFF) call to technology companies,
asking them to shore-up their security practices.
(EFF had bought a full page advertisement in the January,
2017 issue of Wired magazine.)&lt;/p&gt;

&lt;p&gt;The response talks about the data mine, machine learning, and records
of government abuses targeted against citizens. It asserts,&lt;/p&gt;

&lt;p&gt;“The greatest danger of these databases is that we are only one rogue agent,
or rogue agency, or rogue government away from having our data turned against
us. In a “national security emergency,” or under some other cover, our
government could claim broad, sweeping access to social network, advertising,
and purchase behavior databases for the purpose of identifying and prosecuting
citizens they deem threatening.”&lt;/p&gt;

&lt;p&gt;That’s why. Because, while ideas can’t be squashed,
individuals who hold them can be.&lt;/p&gt;

&lt;h2 id=&quot;alternatives&quot;&gt;Alternatives&lt;/h2&gt;
&lt;p&gt;There aren’t really any good, secure alternatives to Facebook that I know of.
I’d like to know. But really, I don’t find it necessary to share a selfie
in front of the leaning tower of Pisa with everyone I know or have been
acquainted with.&lt;/p&gt;

&lt;p&gt;For messaging, including phone calls and picture sharing with individuals
whom I’m truly close to, I use &lt;a href=&quot;https://www.signal.org/&quot;&gt;Signal messenger&lt;/a&gt;.
Signal is an angel funded small team that continually improves the
function of the app. The application provides one of the few easy, practical
ways to stay in touch without leaking information to the datalords.
I like it.&lt;/p&gt;</content><author><name>Douglas Lovell</name></author><summary type="html">… or WhatsApp or Instagram …</summary></entry><entry><title type="html">Merging migrations</title><link href="/2018/03/merging-structure.html" rel="alternate" type="text/html" title="Merging migrations" /><published>2018-03-09T00:00:00-03:00</published><updated>2018-03-09T00:00:00-03:00</updated><id>/2018/03/merging-structure</id><content type="html" xml:base="/2018/03/merging-structure.html">&lt;p&gt;In Rails, the file &lt;code class=&quot;highlighter-rouge&quot;&gt;db/structure.sql&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;db/schema.rb&lt;/code&gt; (depending)
captures a snapshot of the state of the development database after a
migration, when you run the &lt;code class=&quot;highlighter-rouge&quot;&gt;db:migrate&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;db:schema:dump&lt;/code&gt; tasks.&lt;/p&gt;

&lt;p&gt;What do you do when you have migrations in two different branches
of your development tree? Do you get a merge conflict? How do you resolve it?
What if you don’t get a merge conflict?&lt;/p&gt;

&lt;p&gt;I’ll use the term “schema” now to refer to the file
(&lt;code class=&quot;highlighter-rouge&quot;&gt;db/structure.sql&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;db/schema.rb&lt;/code&gt;).
It is the file that captures the structure of the database.
Because the schema is generated by a program, not hand written, the best
effort of &lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt; to try to merge two changes to it will often produce a
result different than what you will get from running the &lt;code class=&quot;highlighter-rouge&quot;&gt;db:schema:dump&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Why is that important?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It might have duplications or content out of sequence.&lt;/li&gt;
  &lt;li&gt;The next migration will produce a schema with differences
unrelated to the migration.&lt;/li&gt;
  &lt;li&gt;The schema is the only source of truth about the database structure.
It deserves extra care, to keep it aligned with what the framework
and tooling expect and produce.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s a process that allows the tooling to keep the schema in order,
combining independent migrations without errors induced by merging.&lt;/p&gt;

&lt;p&gt;First, do not allow git to merge the file. Set-up git to always treat
independent changes to the schema as a conflict. You do this by placing
a &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitattributes&lt;/code&gt; file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; directory with content,&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;schema.rb merge binary
structure.sql merge binary
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(Or add those lines to the existing &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitattributes&lt;/code&gt; file if there is one.)
The reference for doing that is deep down in the documentation of
&lt;a href=&quot;https://www.git-scm.com/docs/gitattributes&quot;&gt;gitattributes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Second, when you do get a conflict, resolve it as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Checkout &lt;strong&gt;their&lt;/strong&gt; version, &lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout --theirs db/structure.sql&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Accept that change, &lt;code class=&quot;highlighter-rouge&quot;&gt;git add db/structure.sql&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After you have finished the merge and committed the changes (&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt;):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reset the development database such that it matches the structure of
&lt;strong&gt;their&lt;/strong&gt; version, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;rails db:reset&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Rerun the migrations from your branch, &lt;code class=&quot;highlighter-rouge&quot;&gt;rails db:migrate&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Accept the newly generated schema, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;git add db/structure.sql&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Make that new commit, &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this way, your database schema will always be wholly in agreement with
the text wanted by the framework, because it is always and only ever generated
by the framework.&lt;/p&gt;</content><author><name>Douglas Lovell</name></author><summary type="html">In Rails, the file db/structure.sql or db/schema.rb (depending) captures a snapshot of the state of the development database after a migration, when you run the db:migrate or db:schema:dump tasks.</summary></entry><entry><title type="html">Git merge v. rebase</title><link href="/2018/03/rebase-v-merge.html" rel="alternate" type="text/html" title="Git merge v. rebase" /><published>2018-03-08T00:00:00-03:00</published><updated>2018-03-08T00:00:00-03:00</updated><id>/2018/03/rebase-v-merge</id><content type="html" xml:base="/2018/03/rebase-v-merge.html">&lt;p&gt;I’ve been looking into the git merge v. rebase endless theological debate.
It comes up over and over. But I’ve only ever gotten into trouble
trying to rebase. Not getting all wrapped up over how my
commit history looks and just merging has given me fewer issues.&lt;/p&gt;

&lt;p&gt;I’m seeing a camp that recommends rebasing your local feature branch when
master gets ahead of it, but merging it when you bring it back into master.
Another person says, yeah, do that, but if your rebase has conflicts,
give it up and merge instead.&lt;/p&gt;

&lt;p&gt;I’ll paste some links now. …&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/11219380/608359&quot;&gt;SO: Conflict resolution during rebase&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.atlassian.com/git/articles/git-team-workflows-merge-or-rebase&quot;&gt;Atlassian article&lt;/a&gt;
has pros and cons and what Atlassian does.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/36587353/608359&quot;&gt;SO: When to rebase&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.atlassian.com/git/tutorials/merging-vs-rebasing&quot;&gt;Atlassian tutorial&lt;/a&gt;
Contains “The Golden Rule of Rebasing” and after two thousand words says,
“that’s all you really need to know to start”.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The gist I’m taking away is that it’s okay (but entirely optional) to rebase
your feature branch occasionally before finally &lt;strong&gt;merging&lt;/strong&gt; it back to master.&lt;/p&gt;

&lt;p&gt;All of the caveats and warnings I’m seeing in these threads are about rebase.
That tells me something. My friend, KISS says, “Just merge and stop fussing.”&lt;/p&gt;</content><author><name>Douglas Lovell</name></author><summary type="html">I’ve been looking into the git merge v. rebase endless theological debate. It comes up over and over. But I’ve only ever gotten into trouble trying to rebase. Not getting all wrapped up over how my commit history looks and just merging has given me fewer issues.</summary></entry><entry><title type="html">RSpec have HTTP status upgrade</title><link href="/2018/02/have-http-status.html" rel="alternate" type="text/html" title="RSpec have HTTP status upgrade" /><published>2018-02-23T00:00:00-03:00</published><updated>2018-02-23T00:00:00-03:00</updated><id>/2018/02/have-http-status</id><content type="html" xml:base="/2018/02/have-http-status.html">&lt;p&gt;When upgrading a project to the Rails 5.2 pre-release we started to see
some deprecation warnings in our RSpec runs.
The warnings were as follows, and occurred wherever
&lt;code class=&quot;highlighter-rouge&quot;&gt;have_http_status(:success)&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;have_success_status&lt;/code&gt; and the like
were used in tests.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.DEPRECATION WARNING: The success? predicate is deprecated and will be removed
in Rails 6.0. Please use successful? as provided by Rack::Response::Helpers.
(called from matches? at rspec/rails/matchers/have_http_status.rb:263)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This was annoying because many controller tests use
the &lt;code class=&quot;highlighter-rouge&quot;&gt;have_success_status&lt;/code&gt; matcher.&lt;/p&gt;

&lt;h2 id=&quot;what-changed&quot;&gt;What changed&lt;/h2&gt;
&lt;p&gt;Rails, with &lt;a href=&quot;https://github.com/rails/rails/pull/30104/files&quot;&gt;this commit&lt;/a&gt;
decided, in very reasonable fashion, to standardize the response status
checking methods in ActionDispatch::TestResponse.&lt;/p&gt;

&lt;p&gt;The team simply deprecated the &lt;code class=&quot;highlighter-rouge&quot;&gt;success?&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;missing?&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;error?&lt;/code&gt; methods
with the suggestion to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;successful?&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;not_found?&lt;/code&gt;,
and &lt;code class=&quot;highlighter-rouge&quot;&gt;server_error?&lt;/code&gt; methods pre-existing in
&lt;a href=&quot;https://github.com/rack/rack/blob/b37356ee881c0de4266165dacb8af4efaebaf4ec/lib/rack/response.rb#L110&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Rack::Response::Helpers&lt;/code&gt;&lt;/a&gt;.
(&lt;code class=&quot;highlighter-rouge&quot;&gt;ActionDispatch::TestResponse&lt;/code&gt; inherits from &lt;code class=&quot;highlighter-rouge&quot;&gt;ActionDispatch::Response&lt;/code&gt; which
includes &lt;code class=&quot;highlighter-rouge&quot;&gt;Rack::Response::Helpers&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;rspec-rails&lt;/code&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;have_http_status&lt;/code&gt; matcher called these methods
in a meta-sense, by mapping the &lt;code class=&quot;highlighter-rouge&quot;&gt;:success&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;:missing&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;:error&lt;/code&gt;
symbols to corresponding methods invoked on the response.&lt;/p&gt;

&lt;h2 id=&quot;how-to-repair&quot;&gt;How to repair?&lt;/h2&gt;
&lt;p&gt;One way to repair this would have been to support the replacement methods,
e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;successful?&lt;/code&gt; and require any extant tests using, for example,
&lt;code class=&quot;highlighter-rouge&quot;&gt;have_http_status(:success)&lt;/code&gt; to make the change to
&lt;code class=&quot;highlighter-rouge&quot;&gt;have_http_status(:successful)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This would possibly be defensible as a “follow closely as a thin wrapper on
Rails” strategy. Unfortunately, it would break a mountain of tests!&lt;/p&gt;

&lt;p&gt;However the &lt;code class=&quot;highlighter-rouge&quot;&gt;successful?&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;server_error?&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;not_found?&lt;/code&gt; methods have
been available to &lt;code class=&quot;highlighter-rouge&quot;&gt;ActionDispatch::TestResponse&lt;/code&gt; via
&lt;code class=&quot;highlighter-rouge&quot;&gt;Rack::Response::Helpers&lt;/code&gt; for many many years.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/rspec/rspec-rails/pull/1951&quot;&gt;method provided&lt;/a&gt;
introduces the new status codes, &lt;code class=&quot;highlighter-rouge&quot;&gt;:successful&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;:not_found&lt;/code&gt;,
and &lt;code class=&quot;highlighter-rouge&quot;&gt;:server_error&lt;/code&gt; while maintaining support for the Rails deprecated ones.
It does so by mapping, for example, &lt;code class=&quot;highlighter-rouge&quot;&gt;:success&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;successful?&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Thus the world of &lt;code class=&quot;highlighter-rouge&quot;&gt;rspec-rails&lt;/code&gt; turns in accordance with the heavens,
that is, Rails.&lt;/p&gt;</content><author><name>Douglas Lovell</name></author><summary type="html">When upgrading a project to the Rails 5.2 pre-release we started to see some deprecation warnings in our RSpec runs. The warnings were as follows, and occurred wherever have_http_status(:success) or have_success_status and the like were used in tests.</summary></entry></feed>