<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-08-12T19:06:14-03:00</updated><id>http://localhost:4000/</id><title type="html">Wind and Water</title><subtitle>The fascination of what's difficult...</subtitle><author><name>Douglas Lovell</name></author><entry><title type="html">Keeping minitest Dry</title><link href="http://localhost:4000/2018/08/dry-minitest.html" rel="alternate" type="text/html" title="Keeping minitest Dry" /><published>2018-08-12T00:00:00-03:00</published><updated>2018-08-12T00:00:00-03:00</updated><id>http://localhost:4000/2018/08/dry-minitest</id><content type="html" xml:base="http://localhost:4000/2018/08/dry-minitest.html">&lt;p&gt;Here’s a test written with
&lt;a href=&quot;https://github.com/seattlerb/minitest&quot;&gt;minitest&lt;/a&gt;
as &lt;a href=&quot;#footnote&quot;&gt;extended for Rails&lt;/a&gt;.
It is from the open source Rails project,
&lt;a href=&quot;https://github.com/wbreeze/iaccdb&quot;&gt;IACCDB&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;require 'test_helper'

module Admin
  class MemberControllerTest &amp;lt; ActionController::TestCase
    setup do
      @member_list = create_list(:member, 12)
      @before_attrs = @member_list.first.attributes
      @after_attrs = @before_attrs.merge(
        {'family_name' =&amp;gt; Faker::Name.last_name}
      )
    end

    test 'non-admin cannot view index' do
      get :index
      assert_response :unauthorized
    end

    test 'non-admin cannot show member' do
      get :show, params: { id: @member_list.first.id }
      assert_response :unauthorized
    end

    test 'non-admin cannot patch update' do
      patch :update, params: { id: @after_attrs['id'], member: @after_attrs }
      assert_response :unauthorized
    end

    test 'admin can get index' do
      http_auth_login(:admin)
      get :index
      assert_response :success
    end

    test 'admin can get show' do
      http_auth_login(:admin)
      get :show, params: { id: @member_list.first.id }
      assert_response :success
    end

    test 'admin can patch update' do
      http_auth_login(:admin)
      patch :update, params: { id: @after_attrs['id'], member: @after_attrs }
      assert_response :redirect
      member = Member.find(@after_attrs['id'])
      assert_not_nil(member)
      assert_equal(@after_attrs['family_name'], member.family_name)
    end

  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The test validates that an unauthenticated user cannot access some
member administration controller methods.
It validates that an authenticated user can access the methods.&lt;/p&gt;

&lt;p&gt;A few things about this test file are troublesome:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Primarily, I don’t like the repetiton of &lt;code class=&quot;highlighter-rouge&quot;&gt;http_auth_login(:admin)&lt;/code&gt;
at the front of each of the authenticated tests.&lt;/li&gt;
  &lt;li&gt;There is some repetition in the test naming: “non-admin cannot”,
“admin can”&lt;/li&gt;
  &lt;li&gt;There are two groups of tests here that aren’t in any way grouped.
Each group calls the same endpoints with different setup and expected
results.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;thoughtbotshoulda-context&quot;&gt;thoughtbot/shoulda-context&lt;/h2&gt;

&lt;p&gt;One solution is to use the
&lt;a href=&quot;https://github.com/thoughtbot/shoulda-context&quot;&gt;thoughtbot/shoulda-context&lt;/a&gt;
gem.
The shoulda-context gem adds some DSL to minitest for defining contexts of
tests. Now the non-admin tests and the admin
tests each have their own context group. The admin context group has
additional setup that arranges the http basic authentication.&lt;/p&gt;

&lt;p&gt;Here is a link to a
&lt;a href=&quot;https://github.com/wbreeze/iaccdb/commit/f7f8e3c08ca3856ae70545abca097cde195d51cc&quot;&gt;commit with the diff&lt;/a&gt;
that shows all of the changes. It adds the gem and includes
the DSL additions
in the &lt;code class=&quot;highlighter-rouge&quot;&gt;test_helper.rb&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Here is the new test file. The test implementations themselves did not
change, and are omitted here. The structure of the test file changed with
&lt;code class=&quot;highlighter-rouge&quot;&gt;context&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;should&lt;/code&gt; DSL methods.
You can find an additional &lt;code class=&quot;highlighter-rouge&quot;&gt;setup&lt;/code&gt; block within the
&lt;code class=&quot;highlighter-rouge&quot;&gt;allow admin&lt;/code&gt; context that takes care of authenticating the
admin user for that context.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;require 'test_helper'

module Admin
  class MemberControllerTest &amp;lt; ActionController::TestCase
    setup do
      @member_list = create_list(:member, 12)
      @before_attrs = @member_list.first.attributes
      @after_attrs = @before_attrs.merge(
        {'family_name' =&amp;gt; Faker::Name.last_name}
      )
    end

    context 'deny non-admin' do
      should 'get index' do
        # ...
      end

      should 'get show' do
        # ...
      end

      should 'patch update' do
        # ...
      end
    end

    context 'allow admin' do
      setup do
        http_auth_login(:admin)
      end

      should 'get index' do
        # ...
      end

      should 'get show' do
        # ...
      end

      should 'patch update' do
        # ...
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is more satisfying because it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Calls out that we’re testing the same endpoints with two setups&lt;/li&gt;
  &lt;li&gt;Avoids repeating the &lt;code class=&quot;highlighter-rouge&quot;&gt;http_auth_login&lt;/code&gt; call on each of the authorized tests&lt;/li&gt;
  &lt;li&gt;Avoids repeating &lt;code class=&quot;highlighter-rouge&quot;&gt;deny non-admin&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;allow admin&lt;/code&gt; in the test names&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;footnote&quot;&gt;Footnote&lt;/h4&gt;
&lt;p&gt;Rails adds some DSL shortcuts through ActiveSupport::TestCase for defining test
methods with &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;; defining setup and teardown methods with
&lt;code class=&quot;highlighter-rouge&quot;&gt;setup&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;teardown&lt;/code&gt;.&lt;/p&gt;</content><author><name>Douglas Lovell</name></author><summary type="html">Here’s a test written with minitest as extended for Rails. It is from the open source Rails project, IACCDB.</summary></entry><entry><title type="html">Coroutines</title><link href="http://localhost:4000/2018/04/co-routines.html" rel="alternate" type="text/html" title="Coroutines" /><published>2018-04-17T00:00:00-03:00</published><updated>2018-04-17T00:00:00-03:00</updated><id>http://localhost:4000/2018/04/co-routines</id><content type="html" xml:base="http://localhost:4000/2018/04/co-routines.html">&lt;p&gt;Have you ever wondered how a construction crane grows with the building?
Well, I have. Here’s how it works.&lt;/p&gt;

&lt;p&gt;A portable crane constructs the initial tower and places the head, with
pivot and counter-balanced long arm, on top. Then the crane starts making
the building.&lt;/p&gt;

&lt;p&gt;When the building reaches a height too close to the height of the crane,
the crew stabilizes the tower using a brace against the building.
Then they add sections, about four meters long,
to the tower underneath the head.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/CraneConnected.jpg&quot; alt=&quot;Preparing to extend the crane&quot; /&gt;
&lt;img src=&quot;/assets/images/CraneExtended.jpg&quot; alt=&quot;Crane extended&quot; /&gt;
&lt;img src=&quot;/assets/images/Crane.jpg&quot; alt=&quot;Construction crane&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This process of adding sections underneath the head is fascinating,
at least to me. It’s a very clever work of engineering.&lt;/p&gt;

&lt;p&gt;The base of the tower, when it was first constructed, is fitted
with a sleeve.
The sleeve is roughly double the length of a section.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The upper part of the sleeve can stably hold the head of the crane.&lt;/li&gt;
  &lt;li&gt;The lower part of the sleeve can stably maintain itself attached to
the tower and move the sleeve up and down on the tower.&lt;/li&gt;
  &lt;li&gt;The middle part of the sleeve is hollow, open on one side, and fitted
with rails and catwalks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The crew:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;moves the sleeve up to the head.&lt;/li&gt;
  &lt;li&gt;braces the tower below the sleeve.&lt;/li&gt;
  &lt;li&gt;raises a section of tower using the crane itself,
and stations the section on the rails of the sleeve.&lt;/li&gt;
  &lt;li&gt;raises another section of tower or a weight to use as adjustable balance
for the head.&lt;/li&gt;
  &lt;li&gt;attaches the head to the sleeve and detaches it from the tower.
There is much banging and fiddling at this stage as they move the
crane to balance the head, take pressure off of the bolts, line up the
bolt holes, and remove or insert the bolts.&lt;/li&gt;
  &lt;li&gt;raises the sleeve, with the attached head, leaving an open space
between the head and the tower.
They do this very, very slowly.
There is no perceptible motion, only over time, a widening gap.&lt;/li&gt;
  &lt;li&gt;slides the new section of tower into place and attaches it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the two close-up pictures of the top of the crane, you can see
the sleeve in position before and while raising the head of the crane
above the existing tower to make room for a new tower section.&lt;/p&gt;

&lt;p&gt;In the far-away picture, the crew has added one new section to the
tower and is preparing to mount the next section onto the rails on
the sleeve.&lt;/p&gt;

&lt;h2 id=&quot;as-a-metaphor&quot;&gt;As a metaphor&lt;/h2&gt;

&lt;p&gt;The crane builds the building, and having built the building,
builds itself. So clever.&lt;/p&gt;

&lt;p&gt;This is something like co-routines in software, which trade work
on two parallel aspects of a task to make progress toward completion.&lt;/p&gt;

&lt;p&gt;It is also something like bootstrapping a company. You could think of
the crane as money, and the building as the business. With some initial
money you start the business. When the business grows it can fund
itself for more growth.&lt;/p&gt;

&lt;p&gt;Seeing the building go up makes me think of incremental development.
A software system isn’t
anything like as regular as the floors of a building. As a building,
software would look more like something from Dr. Seuss.
However, in a sense, adding a floor is a sprint. Extending the tower
is a short sprint or spike to enable more sprints.
Filling-out the floors with fire-protection, plumbing, electrical,
HVAC, walls, ceilings, fixtures, and furnishing may all be planned as
units of work or stories that are no doubt sequenced
and scheduled by the builders.&lt;/p&gt;

&lt;p&gt;The metaphor is limited:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A software system ought to be useful very
early in development, like a shed, then a house, then an office, then
a mall… or whatever. The building isn’t useful until it’s very nearly
complete. (Other than as bracing for the crane that’s building it.)&lt;/li&gt;
  &lt;li&gt;It’s horrible to try to apply construction planning and scheduling
techniques to software. Software isn’t regular enough or made-up of
repeated processes- like laying-in sprinkler pipes on the floor of a
building.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In any case,
it’s fun to see a construction crew make progress on a building,
to see a crane bootstrap itself, and
to see a development team make progress on a software system.&lt;/p&gt;</content><author><name>Douglas Lovell</name></author><summary type="html">Have you ever wondered how a construction crane grows with the building? Well, I have. Here’s how it works.</summary></entry><entry><title type="html">Your Professional Pedigree</title><link href="http://localhost:4000/2018/04/dock-io.html" rel="alternate" type="text/html" title="Your Professional Pedigree" /><published>2018-04-05T00:00:00-03:00</published><updated>2018-04-05T00:00:00-03:00</updated><id>http://localhost:4000/2018/04/dock-io</id><content type="html" xml:base="http://localhost:4000/2018/04/dock-io.html">&lt;p&gt;I was a LinkedIn early adopter in 2007. My profile there was very complete
and well connected. In April, 2017 I got freaked-out about privacy and an
update to LinkedIn terms. (What about them in particular I don’t recall.)
I deleted my account.&lt;/p&gt;

&lt;p&gt;However I’ve found that professionally, not having a LinkedIn presence
can be a show stopper.
If nothing else, we look people up there to check pedigree.
A profile on LinkedIn has become part of what we use to establish trust.&lt;/p&gt;

&lt;p&gt;By allowing LinkedIn to become a trusted arbiter of pedigree, we have
given them a tremendous amount of power. Enter Dock.io.&lt;/p&gt;

&lt;h2 id=&quot;dockio&quot;&gt;Dock.io&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://dock.io/&quot;&gt;Dock.io&lt;/a&gt; supports a clearing-house for professional
data such as educational background, work history, professional connections,
skills, accomplishments, recommendations, and ratings.
The premise is that you, the person
to whom the data refers, have control over the data. And further, that the
data is in an open format that many third parties can read from and write to,
granted access.&lt;/p&gt;

&lt;p&gt;My feeling about this is that it could change the landscape of
professional pedigree just a little bit:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Now my universities can write a signed diploma into my education history.&lt;/li&gt;
  &lt;li&gt;Now my employers can write signed records of start and end date, position
and salary into my employment history.&lt;/li&gt;
  &lt;li&gt;Now clients can write ratings and recommendations into my consulting
history.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now I’m not only who I say I am, but who other people say I am.&lt;/p&gt;

&lt;p&gt;Consumers of the data can trust that it is valid, and trust the provenance
of the data because Dock.io puts it in a public, distributed block chain.
(The block chain
rewards the proof of work with units of cryptocurrency that have
some value in trade, as a commodity or security, for fiat currency in an open
market.)&lt;/p&gt;

&lt;p&gt;While the block chain is readable by anyone, my encrypted professional
record is available only to someone who has a key that I have provided to
them. And this is cool, because now:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;we have control over the keys&lt;/li&gt;
  &lt;li&gt;we can monitor who reads the data&lt;/li&gt;
  &lt;li&gt;we can monitor who writes the data&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;neuromancer-concerns&quot;&gt;Neuromancer concerns&lt;/h2&gt;
&lt;p&gt;As pointed out in the opening,
LinkedIn has already become a necessary part of professional life
(at least in the United States). Dock.io would like to replace it,
with benefit that it offers an open solution.&lt;/p&gt;

&lt;p&gt;Supposing Dock.io is successful, all of us will need to have our professional
pedigree in the chain in order to be professionally employed.
Employers will start to require access to write performance data, perhaps.
We’re talking about the equivalent of a credit history, credit report, or
credit score.
However it won’t be only about getting loans, which can be optional.
It will be about getting work, which can be vital. &lt;a href=&quot;#footnote&quot;&gt;Footnote&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This bothers me more than a little, but here we have somewhat of an
opportunity to choose our poison.
If LinkedIn accomplished the same, as they are well along the
road to doing, our data is in private hands, and for sale to
unknown, unaccountable third parties. With Dock.io our data is
in a distributed block chain owned by no-one,
that we nominally control access to.&lt;/p&gt;

&lt;p&gt;I say nominally because parties will begin to require access, and it
will be more and more necessary to provide it.
The big difference will be that we know who asked.
However once granted, how do we know how the party to whom we granted
the access further shares the data?
That will be up to the policies of the parties to whom we grant access.
It will be up to us to insist on strict no-share policies.
Or rather, you share, but only in my Dock.io record where I see you
sharing, see, and nominally control who views.&lt;/p&gt;

&lt;p&gt;Dock.io offers some hope that unlike our credit data, that is always for
sale, our personal professional record can be under our own control.
That we succeed, I think, depends on regulatory policy.
In short, I think we’re doomed.&lt;/p&gt;

&lt;p&gt;Today I put a limited
&lt;a href=&quot;https://www.linkedin.com/in/dclovell/&quot;&gt;profile back on LinkedIn&lt;/a&gt;
and started rebuilding a network there.  I’m also available at
&lt;a href=&quot;https://dock.io?r=douglaslovell:aaaak2fc&quot;&gt;Dock.io&lt;/a&gt;.
That’s a referral link. Check it out.&lt;/p&gt;

&lt;p&gt;And elect people who understand what a sieve the current theater
of privacy has become.&lt;/p&gt;

&lt;h4 id=&quot;footnote&quot;&gt;Footnote&lt;/h4&gt;
&lt;p&gt;Credit history does cross the line into vital territory.
Some employers require good credit history for certain job roles.
Many or most landlords require good credit history to rent apartments.&lt;/p&gt;</content><author><name>Douglas Lovell</name></author><summary type="html">I was a LinkedIn early adopter in 2007. My profile there was very complete and well connected. In April, 2017 I got freaked-out about privacy and an update to LinkedIn terms. (What about them in particular I don’t recall.) I deleted my account.</summary></entry><entry><title type="html">Tracking the source of a fork</title><link href="http://localhost:4000/2018/03/tracking-fork-sources.html" rel="alternate" type="text/html" title="Tracking the source of a fork" /><published>2018-03-21T00:00:00-03:00</published><updated>2018-03-21T00:00:00-03:00</updated><id>http://localhost:4000/2018/03/tracking-fork-sources</id><content type="html" xml:base="http://localhost:4000/2018/03/tracking-fork-sources.html">&lt;p&gt;In Ruby land, we usually take advantage of open source through the
published gems. Sometimes however, it’s nice to use open source from the source.
Sometimes you want to run off of a fork, but track
changes and improvements made to the source.
Here are a couple of scenarios:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You need to make some changes for your project that don’t have a prayer
of making it back into the source. That is, you expect to run from the
fork more or less permanently, without requesting the source provider to
pull your very specialized changes.&lt;/li&gt;
  &lt;li&gt;You don’t trust the source not to disappear, or not to quietly introduce
malicious code in an update.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How do you have your cake and eat it too? How do you run a customized
fork while tracking improvements made to the original?&lt;/p&gt;

&lt;p&gt;(This following is a rewrite of the original post, see &lt;a href=&quot;#note&quot;&gt;note&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;One way to do this is to fork the source, make a special branch that
tracks the source of the fork, and occasionally pull, then merge
or cherry-pick from that branch.&lt;/p&gt;

&lt;p&gt;Here’s how it works. We’re going to pick-up an Ansible role from GitHub.
Let’s use, &lt;code class=&quot;highlighter-rouge&quot;&gt;cdriehuys/ansible-role-lock-root&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First, fork the role in GitHub. The name of our fork is,
&lt;code class=&quot;highlighter-rouge&quot;&gt;TelegraphyInteractive/ansible-role-lock-root&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we clone:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/ansible/roles$ git clone \
&amp;gt; git@github.com:TelegraphyInteractive/ansible-role-lock-root.git lock-root
Cloning into 'lock-root'...
~/ansible/roles$ cd lock-root
~/ansible/roles/lock-root[master]$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We cloned inside of the &lt;code class=&quot;highlighter-rouge&quot;&gt;roles&lt;/code&gt; directory of our Ansible playbook, but
that is an irrelevant detail. We also changed the name to keep it short.
The cloned repository exists in directory, &lt;code class=&quot;highlighter-rouge&quot;&gt;~/ansible/roles/lock-root&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;git config -l&lt;/code&gt; output contains these &lt;code class=&quot;highlighter-rouge&quot;&gt;remote&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;branch&lt;/code&gt;
settings:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;remote.origin.url=git@github.com:TelegraphyInteractive/ansible-role-lock-root.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
branch.master.remote=origin
branch.master.merge=refs/heads/master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We want at least one branch to track the master branch from the original
source, &lt;code class=&quot;highlighter-rouge&quot;&gt;cdriehuys/ansible-role-lock-root&lt;/code&gt;. In order to do this, we first
have to make that repository available as a remote.
We create a remote called, &lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/ansible/roles/lock-root[master]$ git remote add \
&amp;gt; source 'git@github.com:cdriehuys/ansible-role-lock-root.git'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;git config -l&lt;/code&gt; output now contains the additional remote
called, &lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;remote.origin.url=git@github.com:TelegraphyInteractive/ansible-role-lock-root.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
branch.master.remote=origin
branch.master.merge=refs/heads/master
remote.source.url=git@github.com:cdriehuys/ansible-role-lock-root.git
remote.source.fetch=+refs/heads/*:refs/remotes/source/*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We want to make a branch that will track the source from &lt;code class=&quot;highlighter-rouge&quot;&gt;cdriehuys&lt;/code&gt;.
First we fetch the branches from the source.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/ansible/roles/lock-root[master]$ git fetch --all
Fetching origin
Fetching source
From github.com:cdriehuys/ansible-role-lock-root
 * [new branch]      master     -&amp;gt; source/master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next we create a branch, &lt;code class=&quot;highlighter-rouge&quot;&gt;super&lt;/code&gt; that tracks branch &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;
from the source.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/ansible/roles/lock-root[master]$ git branch -t super source/master
Branch 'super' set up to track remote branch 'master' from 'source'.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;git config -l&lt;/code&gt; output shows that the super branch now tracks
the master branch from &lt;code class=&quot;highlighter-rouge&quot;&gt;cdriehuys&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;remote.origin.url=git@github.com:TelegraphyInteractive/ansible-role-lock-root.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
branch.master.remote=origin
branch.master.merge=refs/heads/master
remote.source.url=git@github.com:cdriehuys/ansible-role-lock-root.git
remote.source.fetch=+refs/heads/master:refs/remotes/source/master
branch.super.remote=source
branch.super.merge=refs/heads/master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that the super branch is “read-only.” We won’t be able to push
from the super branch, because we do not have write access to the source
repository. We &lt;strong&gt;can&lt;/strong&gt; however do &lt;code class=&quot;highlighter-rouge&quot;&gt;git pull&lt;/code&gt;. The pull will bring any upstream
changes from &lt;code class=&quot;highlighter-rouge&quot;&gt;cdriehuys&lt;/code&gt; into our workspace.&lt;/p&gt;

&lt;p&gt;When we want to pull upstream changes, we go to the super branch
and pull them.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/ansible/roles/lock-root[production]$ git checkout super
Switched to branch 'super'
Your branch is up to date with 'source/super'.
~/ansible/roles/lock-root[super]$ git pull
Already up to date.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can now get a view of the changes made upstream on the source
through &lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;git diff&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Satisfied with the changes, we can merge, cherry-pick or
&lt;a href=&quot;/2018/03/rebase-v-merge.html&quot;&gt;(gulp) rebase&lt;/a&gt;
the changes we have in master:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/ansible/roles/lock-root[master]$ git checkout master
Switched to branch 'master'
Your branch is up to date with 'origin/master'.
~/ansible/roles/lock-root[production]$ git merge source
Already up to date.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This gives us the best of two worlds, don’t you think?
Who says you can’t have your cake and eat it too?&lt;/p&gt;

&lt;h4 id=&quot;note&quot;&gt;Note&lt;/h4&gt;
&lt;p&gt;The original post arranged for the master branch to point to the origin
from which we forked. This was painful in many ways, especially when
checking-out the project for the first time:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The default master was not present, so the &lt;code class=&quot;highlighter-rouge&quot;&gt;git clone&lt;/code&gt; had to specify
a branch.&lt;/li&gt;
  &lt;li&gt;Reconstituting the elaborate setup dealt a lot of complicated rework.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hoping this is simpler and apology for misleading anybody.
Rewrite date, August 12, 2018.&lt;/p&gt;</content><author><name>Douglas Lovell</name></author><summary type="html">In Ruby land, we usually take advantage of open source through the published gems. Sometimes however, it’s nice to use open source from the source. Sometimes you want to run off of a fork, but track changes and improvements made to the source. Here are a couple of scenarios:</summary></entry><entry><title type="html">The Dispossessed</title><link href="http://localhost:4000/2018/03/the-dispossessed.html" rel="alternate" type="text/html" title="The Dispossessed" /><published>2018-03-18T00:00:00-03:00</published><updated>2018-03-18T00:00:00-03:00</updated><id>http://localhost:4000/2018/03/the-dispossessed</id><content type="html" xml:base="http://localhost:4000/2018/03/the-dispossessed.html">&lt;p&gt;When I read about the &lt;a href=&quot;https://www.nytimes.com/2018/01/23/obituaries/ursula-k-le-guin-acclaimed-for-her-fantasy-fiction-is-dead-at-88.html&quot;&gt;death of Ursula K Le Guin&lt;/a&gt; in the New York Times, at the end of January, I thought
how agreeable she sounded, remembered that I hadn’t found her books
accessible when I first encountered them as an adolescent,
for whatever reason, and
decided to try reading one of them again.&lt;/p&gt;

&lt;p&gt;It isn’t strange, but a little regrettable how an artist’s stock can
go up when they die. It’s only that so many people have that same reaction–
being reminded of something they’ve missed, finding new or renewed
interest in a body of work that, with one inevitable event, has become
a life’s work. The regret is that the artist doesn’t get to feel the
appreciation.&lt;/p&gt;

&lt;p&gt;Her first five books found resonance with me just now, having content
about strangers, aliens living in foreign lands, because I am. After so
many years in the country of my birth now living far away in what is
on one hand much alike– an urban economy connected and woven into
global commerce and trade–
and on the other hand completely foreign in language, cultural expectations,
experience, and values.&lt;/p&gt;

&lt;p&gt;The fifth book, &lt;em&gt;The Dispossessed&lt;/em&gt;, felt to me like a classic work
on a par with the best of the classics.
I feel amazed that it isn’t better known
and more talked about. I feel amazed that it isn’t part of the cultural
curriculum that we consider foundational for the well educated.
Or perhaps it is, and I haven’t been, and I’m just getting around to it.&lt;/p&gt;

&lt;p&gt;When it was published in 1974 it was called a utopian novel. It was a book
about an experimental, anarchistic society,
its successes and shortcomings, and its
relationship to the worlds around it.&lt;/p&gt;

&lt;p&gt;It reads to me, personally, now, as a book whose major theme is not the
societies themselves or their relationships (of which this book describes many)
but rather the relationship of the individual to society.
Some think of Ayn Rand as owning that territory.
&lt;em&gt;The Dispossessed&lt;/em&gt; reminds me of &lt;em&gt;The Fountainhead&lt;/em&gt;.
I now think that she shares it.
This book, being outside of any time or place in human experience,
beyond the limits of a human city in a plausible time, demonstrates
the relationship of the individual to society
at the intersection of multiple worlds, civilizations, and governments.&lt;/p&gt;

&lt;p&gt;For this reason it has lasting relevance and importance above parity with
&lt;em&gt;1984&lt;/em&gt; or &lt;em&gt;Animal Farm&lt;/em&gt;, &lt;em&gt;Catcher in the Rye&lt;/em&gt; or &lt;em&gt;Fahrenheit 451&lt;/em&gt; – all
books that were part of the curriculum when I was young. We weren’t asked
to consume Ayn Rand or Thomas Moore. Ursula K Le Guin was new then.&lt;/p&gt;

&lt;p&gt;The relationship of the individual to society, the tensions around
realization of individual potentials within the surround of their
community, culture, economy, and government are forever, it seems to me,
in flux and in tension.&lt;/p&gt;

&lt;p&gt;How can a poor kid who’s smart contribute and find traction
in an area that is dominated by those more privileged and perhaps,
as often happens, insular? How does an individual with potential open
up a group who has captured an area of discourse
or commerce and established what they consider to be a norm?
How does a person transcend their sex,
race, economic status, language, education, or whatever attributes we
perceive to constitute an “other”?
How does a person find work that produces income while realizing the
best expression of what they are, or potentially might be?
How does a society support and encourage the very difficult work
of sitting down and actually working, vs. getting by, or getting along,
or fitting in?
How do we help people who, facing their work, the incredible monster that it is,
fall short, fail, fear, as we all do, give up, or fall into addiction
or despair or depression?&lt;/p&gt;

&lt;p&gt;These are to me questions of the greatest importance and measure
of the success of a society.  And that’s why I so much liked
Ursula K Le Guin’s &lt;em&gt;The Dispossessed&lt;/em&gt;.&lt;/p&gt;</content><author><name>Douglas Lovell</name></author><summary type="html">When I read about the death of Ursula K Le Guin in the New York Times, at the end of January, I thought how agreeable she sounded, remembered that I hadn’t found her books accessible when I first encountered them as an adolescent, for whatever reason, and decided to try reading one of them again.</summary></entry><entry><title type="html">Why I’m not on Facebook</title><link href="http://localhost:4000/2018/03/why-i-dont-use-fb.html" rel="alternate" type="text/html" title="Why I'm not on Facebook" /><published>2018-03-16T00:00:00-03:00</published><updated>2018-03-16T00:00:00-03:00</updated><id>http://localhost:4000/2018/03/why-i-dont-use-fb</id><content type="html" xml:base="http://localhost:4000/2018/03/why-i-dont-use-fb.html">&lt;h1 id=&quot;-or-whatsapp-or-instagram-&quot;&gt;… or WhatsApp or Instagram …&lt;/h1&gt;

&lt;p&gt;I don’t use these programs because they leak information about
who your contacts are, whom you talk with, when, and how often,
to invisible, unaccountable third parties.&lt;/p&gt;

&lt;p&gt;Who are these third parties?&lt;/p&gt;

&lt;p&gt;From the &lt;a href=&quot;https://www.facebook.com/about/privacy&quot;&gt;Facebook privacy policy&lt;/a&gt;,
“We share information we have about you within the family of companies that
are part of Facebook.”&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.facebook.com/help/111814505650678&quot;&gt;Facebook lists&lt;/a&gt;
nine companies which comprise the Facebook family:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;WhatsApp: share with Facebook your contacts and how much you interact with them.&lt;/li&gt;
  &lt;li&gt;Instagram LLC: share pictures of people and things of interest to you,
your location.&lt;/li&gt;
  &lt;li&gt;Moves: share with Facebook an activity diary of your daily life.&lt;/li&gt;
  &lt;li&gt;Onavo: share with Facebook the apps you’re using
and how much data you’re using on them (possibly more).&lt;/li&gt;
  &lt;li&gt;Facebook Payments, Inc.: You think this stuff is free? You’re the product.&lt;/li&gt;
  &lt;li&gt;Oculus: virtual reality goggles.&lt;/li&gt;
  &lt;li&gt;Atlas: measure and track purchasing behavior linked to advertising, target
advertising.&lt;/li&gt;
  &lt;li&gt;Masquerade: cross web-site tracking technology.&lt;/li&gt;
  &lt;li&gt;CrowdTangle: monitor social media.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first two are probably familiar.
The next two, maybe you’re foolish enough to use them.
Ever heard of Atlas, Masquerade and CrowdTangle?
&lt;a href=&quot;http://www.crowdtangle.com/features&quot;&gt;CrowdTangle&lt;/a&gt;
is especially interesting.
Know what they do? I’ve added summaries to give you a clue.&lt;/p&gt;

&lt;p&gt;Facebook makes a big deal of your “privacy controls.” You can change all
sorts of settings about who “sees” your posts. This is smoke and mirrors.
The fact is that all of the above collect, collate, merge, and sell access
to &lt;strong&gt;everything&lt;/strong&gt; you do on Facebook and elsewhere on the internet.
Your activity is available privately or by subscription,
without accountability to you, for proprietary purposes.&lt;/p&gt;

&lt;p&gt;Organizations that collect, collate, monitor, and enhance this data
aren’t the true darknet, because they operate under a public
legal framework where they nevertheless hide. What could we call them?
Let’s call them the “datalords”.&lt;/p&gt;

&lt;p&gt;When you assent to Facebook terms, or WhatsApp, or Instagram, or …
you assent to all of the above.&lt;/p&gt;

&lt;h2 id=&quot;how-you-leak-data-to-the-datalords&quot;&gt;How you leak data to the datalords&lt;/h2&gt;
&lt;p&gt;When I share my phone number into your contact list, because you use
WhatsApp, the fact that we are somehow socially connected goes to
the datalords. The fact that I myself don’t use WhatsApp doesn’t matter.
There is still a data block for me and it just got connected to yours.&lt;/p&gt;

&lt;h3 id=&quot;how-metadata-works&quot;&gt;How metadata works&lt;/h3&gt;
&lt;p&gt;Here is an example of how metadata works and how you leak it.
I spend a lot of time abroad, so I have phone numbers in two countries.
One day I made the mistake of sharing my entire contact information with
a WhatsApp user (which is just about anybody). Both of my phone numbers
went into their address book.&lt;/p&gt;

&lt;p&gt;Up until that point, my phone number in one country and the one in another
were completely separate data blocks in the store of the datalords.
However, when next they sucked-up the contacts of my friend,
the two numbers were related and a connection made between the two,
up to now separate data blocks. The connection says, “these are likely the
same person.” After all, they are! And now the datalords can connect every
bit of metadata about one with the other. They’ve enhanced their whole
world picture about who’s who connected with whom.&lt;/p&gt;

&lt;p&gt;And the metadata doesn’t end there. My phone number is associated with my
credit card numbers. Whenever I make a purchase using the credit card,
the purchase data gets tagged on. That includes the location of the purchase,
amount, company, service, sometimes itemized products purchased.&lt;/p&gt;

&lt;p&gt;By matching data items across data blocks – phone number to phone number,
credit card number to credit card number – all of the additional data items
in those blocks can be associated with a single identity and form an ever
growing and more detailed picture of that identity.&lt;/p&gt;

&lt;h2 id=&quot;why-this-makes-me-uneasy&quot;&gt;Why this makes me uneasy&lt;/h2&gt;
&lt;p&gt;As a moral, law abiding citizen who works hard,
pays his taxes and stays out of trouble,
why should I care?&lt;/p&gt;

&lt;p&gt;In early 2017 I wrote a &lt;a href=&quot;http://wbreeze.com/bio/TOSFB.html&quot;&gt;response&lt;/a&gt;
to an Electronic Frontier Foundation (EFF) call to technology companies,
asking them to shore-up their security practices.
(EFF had bought a full page advertisement in the January,
2017 issue of Wired magazine.)&lt;/p&gt;

&lt;p&gt;The response talks about the data mine, machine learning, and records
of government abuses targeted against citizens. It asserts,&lt;/p&gt;

&lt;p&gt;“The greatest danger of these databases is that we are only one rogue agent,
or rogue agency, or rogue government away from having our data turned against
us. In a “national security emergency,” or under some other cover, our
government could claim broad, sweeping access to social network, advertising,
and purchase behavior databases for the purpose of identifying and prosecuting
citizens they deem threatening.”&lt;/p&gt;

&lt;p&gt;That’s why. Because, while ideas can’t be squashed,
individuals who hold them can be.&lt;/p&gt;

&lt;h2 id=&quot;alternatives&quot;&gt;Alternatives&lt;/h2&gt;
&lt;p&gt;There aren’t really any good, secure alternatives to Facebook that I know of.
I’d like to know. But really, I don’t find it necessary to share a selfie
in front of the leaning tower of Pisa with everyone I know or have been
acquainted with.&lt;/p&gt;

&lt;p&gt;For messaging, including phone calls and picture sharing with individuals
whom I’m truly close to, I use &lt;a href=&quot;https://www.signal.org/&quot;&gt;Signal messenger&lt;/a&gt;.
Signal is an angel funded small team that continually improves the
function of the app. The application provides one of the few easy, practical
ways to stay in touch without leaking information to the datalords.
I like it.&lt;/p&gt;</content><author><name>Douglas Lovell</name></author><summary type="html">… or WhatsApp or Instagram …</summary></entry><entry><title type="html">Merging migrations</title><link href="http://localhost:4000/2018/03/merging-structure.html" rel="alternate" type="text/html" title="Merging migrations" /><published>2018-03-09T00:00:00-03:00</published><updated>2018-03-09T00:00:00-03:00</updated><id>http://localhost:4000/2018/03/merging-structure</id><content type="html" xml:base="http://localhost:4000/2018/03/merging-structure.html">&lt;p&gt;In Rails, the file &lt;code class=&quot;highlighter-rouge&quot;&gt;db/structure.sql&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;db/schema.rb&lt;/code&gt; (depending)
captures a snapshot of the state of the development database after a
migration, when you run the &lt;code class=&quot;highlighter-rouge&quot;&gt;db:migrate&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;db:schema:dump&lt;/code&gt; tasks.&lt;/p&gt;

&lt;p&gt;What do you do when you have migrations in two different branches
of your development tree? Do you get a merge conflict? How do you resolve it?
What if you don’t get a merge conflict?&lt;/p&gt;

&lt;p&gt;I’ll use the term “schema” now to refer to the file
(&lt;code class=&quot;highlighter-rouge&quot;&gt;db/structure.sql&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;db/schema.rb&lt;/code&gt;).
It is the file that captures the structure of the database.
Because the schema is generated by a program, not hand written, the best
effort of &lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt; to try to merge two changes to it will often produce a
result different than what you will get from running the &lt;code class=&quot;highlighter-rouge&quot;&gt;db:schema:dump&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Why is that important?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It might have duplications or content out of sequence.&lt;/li&gt;
  &lt;li&gt;The next migration will produce a schema with differences
unrelated to the migration.&lt;/li&gt;
  &lt;li&gt;The schema is the only source of truth about the database structure.
It deserves extra care, to keep it aligned with what the framework
and tooling expect and produce.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s a process that allows the tooling to keep the schema in order,
combining independent migrations without errors induced by merging.&lt;/p&gt;

&lt;p&gt;First, do not allow git to merge the file. Set-up git to always treat
independent changes to the schema as a conflict. You do this by placing
a &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitattributes&lt;/code&gt; file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; directory with content,&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;schema.rb merge binary
structure.sql merge binary
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(Or add those lines to the existing &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitattributes&lt;/code&gt; file if there is one.)
The reference for doing that is deep down in the documentation of
&lt;a href=&quot;https://www.git-scm.com/docs/gitattributes&quot;&gt;gitattributes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Second, when you do get a conflict, resolve it as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Checkout &lt;strong&gt;their&lt;/strong&gt; version, &lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout --theirs db/structure.sql&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Accept that change, &lt;code class=&quot;highlighter-rouge&quot;&gt;git add db/structure.sql&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After you have finished the merge and committed the changes (&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt;):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reset the development database such that it matches the structure of
&lt;strong&gt;their&lt;/strong&gt; version, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;rails db:reset&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Rerun the migrations from your branch, &lt;code class=&quot;highlighter-rouge&quot;&gt;rails db:migrate&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Accept the newly generated schema, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;git add db/structure.sql&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Make that new commit, &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this way, your database schema will always be wholly in agreement with
the text wanted by the framework, because it is always and only ever generated
by the framework.&lt;/p&gt;</content><author><name>Douglas Lovell</name></author><summary type="html">In Rails, the file db/structure.sql or db/schema.rb (depending) captures a snapshot of the state of the development database after a migration, when you run the db:migrate or db:schema:dump tasks.</summary></entry><entry><title type="html">Git merge v. rebase</title><link href="http://localhost:4000/2018/03/rebase-v-merge.html" rel="alternate" type="text/html" title="Git merge v. rebase" /><published>2018-03-08T00:00:00-03:00</published><updated>2018-03-08T00:00:00-03:00</updated><id>http://localhost:4000/2018/03/rebase-v-merge</id><content type="html" xml:base="http://localhost:4000/2018/03/rebase-v-merge.html">&lt;p&gt;I’ve been looking into the git merge v. rebase endless theological debate.
It comes up over and over. But I’ve only ever gotten into trouble
trying to rebase. Not getting all wrapped up over how my
commit history looks and just merging has given me fewer issues.&lt;/p&gt;

&lt;p&gt;I’m seeing a camp that recommends rebasing your local feature branch when
master gets ahead of it, but merging it when you bring it back into master.
Another person says, yeah, do that, but if your rebase has conflicts,
give it up and merge instead.&lt;/p&gt;

&lt;p&gt;I’ll paste some links now. …&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/11219380/608359&quot;&gt;SO: Conflict resolution during rebase&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.atlassian.com/git/articles/git-team-workflows-merge-or-rebase&quot;&gt;Atlassian article&lt;/a&gt;
has pros and cons and what Atlassian does.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/36587353/608359&quot;&gt;SO: When to rebase&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.atlassian.com/git/tutorials/merging-vs-rebasing&quot;&gt;Atlassian tutorial&lt;/a&gt;
Contains “The Golden Rule of Rebasing” and after two thousand words says,
“that’s all you really need to know to start”.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The gist I’m taking away is that it’s okay (but entirely optional) to rebase
your feature branch occasionally before finally &lt;strong&gt;merging&lt;/strong&gt; it back to master.&lt;/p&gt;

&lt;p&gt;All of the caveats and warnings I’m seeing in these threads are about rebase.
That tells me something. My friend, KISS says, “Just merge and stop fussing.”&lt;/p&gt;</content><author><name>Douglas Lovell</name></author><summary type="html">I’ve been looking into the git merge v. rebase endless theological debate. It comes up over and over. But I’ve only ever gotten into trouble trying to rebase. Not getting all wrapped up over how my commit history looks and just merging has given me fewer issues.</summary></entry><entry><title type="html">RSpec have HTTP status upgrade</title><link href="http://localhost:4000/2018/02/have-http-status.html" rel="alternate" type="text/html" title="RSpec have HTTP status upgrade" /><published>2018-02-23T00:00:00-03:00</published><updated>2018-02-23T00:00:00-03:00</updated><id>http://localhost:4000/2018/02/have-http-status</id><content type="html" xml:base="http://localhost:4000/2018/02/have-http-status.html">&lt;p&gt;When upgrading a project to the Rails 5.2 pre-release we started to see
some deprecation warnings in our RSpec runs.
The warnings were as follows, and occurred wherever
&lt;code class=&quot;highlighter-rouge&quot;&gt;have_http_status(:success)&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;have_success_status&lt;/code&gt; and the like
were used in tests.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.DEPRECATION WARNING: The success? predicate is deprecated and will be removed
in Rails 6.0. Please use successful? as provided by Rack::Response::Helpers.
(called from matches? at rspec/rails/matchers/have_http_status.rb:263)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This was annoying because many controller tests use
the &lt;code class=&quot;highlighter-rouge&quot;&gt;have_success_status&lt;/code&gt; matcher.&lt;/p&gt;

&lt;h2 id=&quot;what-changed&quot;&gt;What changed&lt;/h2&gt;
&lt;p&gt;Rails, with &lt;a href=&quot;https://github.com/rails/rails/pull/30104/files&quot;&gt;this commit&lt;/a&gt;
decided, in very reasonable fashion, to standardize the response status
checking methods in ActionDispatch::TestResponse.&lt;/p&gt;

&lt;p&gt;The team simply deprecated the &lt;code class=&quot;highlighter-rouge&quot;&gt;success?&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;missing?&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;error?&lt;/code&gt; methods
with the suggestion to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;successful?&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;not_found?&lt;/code&gt;,
and &lt;code class=&quot;highlighter-rouge&quot;&gt;server_error?&lt;/code&gt; methods pre-existing in
&lt;a href=&quot;https://github.com/rack/rack/blob/b37356ee881c0de4266165dacb8af4efaebaf4ec/lib/rack/response.rb#L110&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Rack::Response::Helpers&lt;/code&gt;&lt;/a&gt;.
(&lt;code class=&quot;highlighter-rouge&quot;&gt;ActionDispatch::TestResponse&lt;/code&gt; inherits from &lt;code class=&quot;highlighter-rouge&quot;&gt;ActionDispatch::Response&lt;/code&gt; which
includes &lt;code class=&quot;highlighter-rouge&quot;&gt;Rack::Response::Helpers&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;rspec-rails&lt;/code&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;have_http_status&lt;/code&gt; matcher called these methods
in a meta-sense, by mapping the &lt;code class=&quot;highlighter-rouge&quot;&gt;:success&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;:missing&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;:error&lt;/code&gt;
symbols to corresponding methods invoked on the response.&lt;/p&gt;

&lt;h2 id=&quot;how-to-repair&quot;&gt;How to repair?&lt;/h2&gt;
&lt;p&gt;One way to repair this would have been to support the replacement methods,
e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;successful?&lt;/code&gt; and require any extant tests using, for example,
&lt;code class=&quot;highlighter-rouge&quot;&gt;have_http_status(:success)&lt;/code&gt; to make the change to
&lt;code class=&quot;highlighter-rouge&quot;&gt;have_http_status(:successful)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This would possibly be defensible as a “follow closely as a thin wrapper on
Rails” strategy. Unfortunately, it would break a mountain of tests!&lt;/p&gt;

&lt;p&gt;However the &lt;code class=&quot;highlighter-rouge&quot;&gt;successful?&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;server_error?&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;not_found?&lt;/code&gt; methods have
been available to &lt;code class=&quot;highlighter-rouge&quot;&gt;ActionDispatch::TestResponse&lt;/code&gt; via
&lt;code class=&quot;highlighter-rouge&quot;&gt;Rack::Response::Helpers&lt;/code&gt; for many many years.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/rspec/rspec-rails/pull/1951&quot;&gt;method provided&lt;/a&gt;
introduces the new status codes, &lt;code class=&quot;highlighter-rouge&quot;&gt;:successful&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;:not_found&lt;/code&gt;,
and &lt;code class=&quot;highlighter-rouge&quot;&gt;:server_error&lt;/code&gt; while maintaining support for the Rails deprecated ones.
It does so by mapping, for example, &lt;code class=&quot;highlighter-rouge&quot;&gt;:success&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;successful?&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Thus the world of &lt;code class=&quot;highlighter-rouge&quot;&gt;rspec-rails&lt;/code&gt; turns in accordance with the heavens,
that is, Rails.&lt;/p&gt;</content><author><name>Douglas Lovell</name></author><summary type="html">When upgrading a project to the Rails 5.2 pre-release we started to see some deprecation warnings in our RSpec runs. The warnings were as follows, and occurred wherever have_http_status(:success) or have_success_status and the like were used in tests.</summary></entry></feed>